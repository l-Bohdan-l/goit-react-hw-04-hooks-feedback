{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.scss","components/Section/Section.module.scss","components/Notifications/Notification.module.scss","components/Statistics/Statistics.module.scss","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notifications/Notification.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","className","styles","list","map","option","item","button","type","onClick","id","Section","title","children","defaultProps","Notification","notification","message","Statistics","good","neutral","bad","total","positivePercentage","totalFeedback","positivePercentageValue","App","useState","setGood","setNeutral","setBad","countTotalFeedback","value","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,8BAA8B,OAAS,kC,mBCAhED,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,aAAe,qC,gBCAjCD,EAAOC,QAAU,CAAC,KAAO,2B,+JCEZC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACzC,OACE,oBAAIC,UAAWC,IAAOC,KAAtB,SACGJ,EAAQK,KAAI,SAAAC,GAAM,OACjB,oBAAiBJ,UAAWC,IAAOI,KAAnC,SACE,wBACEL,UAAWC,IAAOK,OAClBC,KAAK,SACLC,QAAS,kBAAMT,EAAgBK,IAC/BK,GAAIL,EAJN,SAMGA,KAPIA,S,gBCJJM,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,oCACE,oBAAIZ,UAAWC,IAAOU,MAAtB,SAA8BA,IAC7BC,MAKPF,EAAQG,aAAe,CACrBF,MAAO,GACPC,SAAU,I,oBCXCE,EAAe,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC7B,OAAO,oBAAGf,UAAWC,IAAOc,aAArB,cAAqCA,EAArC,QAGTD,EAAaD,aAAe,CAC1BG,QAAS,I,oBCJEC,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEMC,EAAgBF,IAChBG,EAA0BF,IAChC,OACE,8BACKC,EACD,qBAAIvB,UAAWC,IAAOC,KAAtB,UACE,wCAAWgB,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYG,KACZ,qDAAwBC,EAAxB,WAGF,cAAC,EAAD,CAAcT,aAAc,4BCkCrBU,MAlDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAcMC,EAAqB,WACzB,OAAOZ,EAAOC,EAAUC,GAS1B,OACE,qBAAKpB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,CAASW,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEb,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA5Ba,SAAAgC,GACP,SAAVA,GACFJ,EAAQT,EAAO,GAEH,YAAVa,GACFH,EAAWT,EAAU,GAET,QAAVY,GACFF,EAAOT,EAAM,QAuBX,cAAC,EAAD,UACE,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,EACPR,mBArB8B,WACtC,IAAID,EAAQS,IAEZ,OADgBE,KAAKC,MAAc,IAAPf,EAAcG,cCnB/Ba,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d19d7deb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__2F0G1\",\"button\":\"FeedbackOptions_button__1eNpo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__2VHtL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__1_JQV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3dFUs\"};","import PropTypes from 'prop-types';\nimport styles from './FeedbackOptions.module.scss';\n\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul className={styles.list}>\n      {options.map(option => (\n        <li key={option} className={styles.item}>\n          <button\n            className={styles.button}\n            type=\"button\"\n            onClick={() => onLeaveFeedback(option)}\n            id={option}\n          >\n            {option}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport styles from './Section.module.scss';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section>\n      <h1 className={styles.title}>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.defaultProps = {\n  title: '',\n  children: [],\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import PropTypes from 'prop-types';\nimport styles from './Notification.module.scss';\n\nexport const Notification = ({ notification }) => {\n  return <p className={styles.notification}> {notification} </p>;\n};\n\nNotification.defaultProps = {\n  message: '',\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { Notification } from '../Notifications/Notification';\nimport PropTypes from 'prop-types';\nimport styles from './Statistics.module.scss';\n\nexport const Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) => {\n  const totalFeedback = total();\n  const positivePercentageValue = positivePercentage();\n  return (\n    <div>\n      {!!totalFeedback ? (\n        <ul className={styles.list}>\n          <li>Good: {good}</li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad: {bad}</li>\n          <li>Total: {totalFeedback}</li>\n          <li>Positive feedback: {positivePercentageValue} %</li>\n        </ul>\n      ) : (\n        <Notification notification={'There is no feedback'} />\n      )}\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.func.isRequired,\n  positivePercentage: PropTypes.func.isRequired,\n};\n","import './App.scss';\nimport React from 'react';\nimport { Component } from 'react';\nimport { FeedbackOptions } from './components/FeedbackOptions/FeedbackOptions';\nimport { Section } from './components/Section/Section';\nimport { Statistics } from './components/Statistics/Statistics';\nimport { useState } from 'react';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const addFeedbackNum = value => {\n    if (value === 'good') {\n      setGood(good + 1);\n    }\n    if (value === 'neutral') {\n      setNeutral(neutral + 1);\n    }\n    if (value === 'bad') {\n      setBad(bad + 1);\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    let total = countTotalFeedback();\n    const percent = Math.round((good * 100) / total);\n    return percent;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={addFeedbackNum}\n          />\n        </Section>\n        <Section>\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback}\n            positivePercentage={countPositiveFeedbackPercentage}\n          />\n        </Section>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}